#!/usr/bin/env python3# -*- coding: utf-8 -*-#*****************************************#src\bisort\mqsort.py#*****************************************__all__ = [    'bist_sort2',    'do_bist_sort2']def bist_sort2(s):    do_bist_sort2(s, 0, len(s)-1)def do_bist_sort2(s,l,h):    '''Программа частичной сортировки кусочка списка.    Программа сортирует список на месте'''    # Если начало участка частичной сортировки больше    # и равен окончанию - нам сортировать нечего не надо    if l > h:        return    # Выбираем разделитель (m) на нашем участке - первый элемент    m = s[l]    # Вводим новые переменные для поиска возможных ячеек для обмена    lo = l # Задаем начальную позицию начало нашего участка списка    hi = h # Задаем конечную позицию окончания нашего участка списка    # Делаем цикл по нахождению и замене ячеек, которые стоят не на своих    # местах, осуществляя поиск с верхнего и нижнего направления    while True:        # Ищем значение с большей стороны        while s[hi] >= m: # Если эти значения больше или равны                          # разделителя - их не меняем            hi -= 1 # Смещаем hi к началу отрезка            if hi <= lo: # Если мы перешли за lo - искать дальше не надо                break        if hi <= lo:            s[lo] = m # Подставляем значения разделителя в последнее место между            # разделенными отрезками            break        s[lo] = s[hi] # Переставляем большое число в свободное место.                      # теперь s[hi] свободно        lo += 1        # Ищем значение с меньшей стороны        while s[lo] < m:  # Если эти значения меньше разделителя - их не меняем            lo += 1  # Смещаем lo к окончанию отрезка            if lo >= hi:  # Если мы перешли за hi - искать дальше не надо                break        if lo >= hi:            lo = hi  # Подставляем значения разделителя в последнее место между                     # разделенными отрезками            break        s[hi] = s[lo]  # Переставляем большое число в свободное место.    # Далее выполняем рекурсию по двум отрезкам от l до lo-1 и от lo+1 до h    do_bist_sort2(s, l, lo-1) # Сортируем верхний подучасток    do_bist_sort2(s, lo+1, h) # Сортируем нижний подучасток